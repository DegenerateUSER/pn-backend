# Generated by Django 5.1.5 on 2025-09-04 17:41

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailWhitelist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('assessment_manager', 'Assessment Manager'), ('proctor', 'Proctor')], default='candidate', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('Coding', 'coding'), ('Non Coding', 'non-coding')], default='non-coding', max_length=255)),
                ('options', models.JSONField(blank=True, null=True)),
                ('correct_answer', models.JSONField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('constraints', models.JSONField(blank=True, null=True)),
                ('expected_output', models.TextField(blank=True, null=True)),
                ('test_cases', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('permissions', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='SampleJSON',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('assessment_manager', 'Assessment Manager'), ('proctor', 'Proctor')], default='assessment_manager', max_length=128)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this client belongs to.', related_name='client_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this client.', related_name='client_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('assessment_type', models.CharField(choices=[('coding', 'Coding'), ('non-coding', 'Non-Coding'), ('mix', 'Mix')], default='mix', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_published', models.BooleanField(default=False)),
                ('total_marks', models.PositiveIntegerField()),
                ('passing_marks', models.PositiveIntegerField()),
                ('total_sets', models.PositiveIntegerField(default=1)),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('set_number', models.PositiveIntegerField(default=1)),
                ('is_proctored', models.BooleanField(default=False)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_electron_only', models.BooleanField(default=False)),
                ('ai_generated_questions', models.PositiveIntegerField(default=0)),
                ('attachments', models.JSONField(blank=True, null=True)),
                ('is_offline', models.BooleanField(default=False)),
                ('universal_code', models.CharField(blank=True, max_length=255, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_assessments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentAssignment',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(max_length=50)),
                ('unique_test_url', models.URLField(blank=True, null=True)),
                ('email_sent', models.BooleanField(default=False)),
                ('is_marked_for_assignment', models.BooleanField(default=False)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='api.assessment')),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_assessments', to=settings.AUTH_USER_MODEL)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_assignments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentReport',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('total_candidates', models.PositiveIntegerField()),
                ('attempted_candidates', models.PositiveIntegerField()),
                ('not_attempted_candidates', models.PositiveIntegerField()),
                ('passed_candidates', models.PositiveIntegerField()),
                ('failed_candidates', models.PositiveIntegerField()),
                ('average_score', models.FloatField()),
                ('highest_score', models.FloatField()),
                ('lowest_score', models.FloatField()),
                ('report_data', models.JSONField()),
                ('is_published', models.BooleanField(default=False)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_reports', to='api.assessment')),
            ],
        ),
        migrations.CreateModel(
            name='CSVUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file_name', models.CharField(max_length=255)),
                ('total_records', models.PositiveIntegerField()),
                ('processed_records', models.PositiveIntegerField()),
                ('status', models.CharField(max_length=50)),
                ('errors', models.JSONField(blank=True, null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=100)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_entity_id', models.CharField(blank=True, max_length=50, null=True)),
                ('related_entity_type', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProctoringSession',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField()),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(max_length=50)),
                ('recordings', models.JSONField(blank=True, null=True)),
                ('incidents', models.JSONField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('proctor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proctoring_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(max_length=50)),
                ('total_marks', models.FloatField()),
                ('obtained_marks', models.FloatField()),
                ('percentage', models.FloatField()),
                ('percentile', models.FloatField()),
                ('position', models.PositiveIntegerField(blank=True, null=True)),
                ('window_switch_count', models.PositiveIntegerField(default=0)),
                ('is_kicked_out', models.BooleanField(default=False)),
                ('kicked_out_reason', models.TextField(blank=True, null=True)),
                ('is_cheating', models.BooleanField(default=False)),
                ('cheating_reason', models.TextField(blank=True, null=True)),
                ('set_number', models.PositiveIntegerField(default=1)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.assessment')),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='api.assessmentassignment')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_reports', to=settings.AUTH_USER_MODEL)),
                ('proctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proctored_reports', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionAttempt',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('selected_answer', models.JSONField(blank=True, null=True)),
                ('is_correct', models.BooleanField(default=False)),
                ('marks_obtained', models.FloatField(default=0)),
                ('time_taken', models.PositiveIntegerField(blank=True, null=True)),
                ('is_attempted', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.question')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_attempts', to='api.report')),
            ],
        ),
        migrations.CreateModel(
            name='ProctoringSnapshot',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField()),
                ('image_url', models.URLField()),
                ('suspicious_activity', models.BooleanField(default=False)),
                ('activity_type', models.CharField(blank=True, max_length=100, null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='api.proctoringsession')),
                ('question', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.question')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.report')),
            ],
        ),
        migrations.AddField(
            model_name='proctoringsession',
            name='report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proctoring_sessions', to='api.report'),
        ),
        migrations.CreateModel(
            name='CandidateReport',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('email_sent', models.BooleanField(default=False)),
                ('report_data', models.JSONField()),
                ('feedback', models.TextField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.assessment')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_reports', to='api.report')),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('num_of_questions', models.IntegerField(default=0)),
                ('total_marks', models.PositiveIntegerField()),
                ('negative_mark_per_question', models.PositiveIntegerField(default=0)),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='api.assessment')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='api.section'),
        ),
        migrations.CreateModel(
            name='SectionReport',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('obtained_marks', models.FloatField()),
                ('total_questions', models.PositiveIntegerField()),
                ('attempted_questions', models.PositiveIntegerField()),
                ('correct_answers', models.PositiveIntegerField()),
                ('wrong_answers', models.PositiveIntegerField()),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='section_reports', to='api.report')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.section')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('csv_upload', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.csvupload')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=255)),
                ('s3_key', models.CharField(max_length=500)),
                ('s3_url', models.URLField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('upload_status', models.CharField(choices=[('pending', 'Pending Upload'), ('uploaded', 'Uploaded'), ('failed', 'Upload Failed')], default='pending', max_length=20)),
                ('presigned_url', models.URLField(blank=True, max_length=500, null=True)),
                ('presigned_url_expires', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='api.assessment')),
            ],
            options={
                'unique_together': {('assessment', 'filename')},
            },
        ),
        migrations.CreateModel(
            name='TestCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_used', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_codes', to='api.assessment')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_codes', to='api.student')),
            ],
            options={
                'unique_together': {('student', 'assessment')},
            },
        ),
    ]
